name: Build immich on new release

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC (supposedly)
  workflow_dispatch:

jobs:
  Check-immich-release:
    runs-on: ubuntu-latest
    outputs:
      latest_release: ${{ steps.check.outputs.latest_release }}
      is_new_release: ${{ steps.check.outputs.is_new_release }}
    steps:
      - name: Restore previous release tag
        id: cache
        uses: actions/cache@v4
        with:
          path: .latest_immich_release
          key: immich-latest-release-

      - name: Get latest Immich release
        id: check
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/immich-app/immich/releases/latest | jq -r '.tag_name')
          PREV_TAG=$(cat .latest_immich_release 2>/dev/null || echo "")
          echo "latest_release=$LATEST_TAG" >> $GITHUB_ENV
          echo "latest_release=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag" $LATEST_TAG
          echo "Previous tag" $PREV_TAG
          if [ "$LATEST_TAG" != "$PREV_TAG" ]; then
            echo "is_new_release=true" >> $GITHUB_ENV
            echo "is_new_release=true" >> $GITHUB_OUTPUT
            echo "$LATEST_TAG" > .latest_immich_release
          else
            echo "is_new_release=false" >> $GITHUB_ENV
            echo "is_new_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Save latest release tag
        if: steps.check.outputs.is_new_release == 'true'
        uses: actions/cache@v4
        with:
          path: .latest_immich_release
          key: immich-latest-release-${{ steps.check.outputs.latest_release }}

  Build-immich:
    needs: Check-immich-release
    outputs:
      timestamp: ${{ steps.build.outputs.timestamp }}
    if: needs.Check-immich-release.outputs.is_new_release == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout my fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sync with upstream loeeeee/immich-in-lxc
        run: |
          git remote add upstream https://github.com/loeeeee/immich-in-lxc.git || true
          git fetch upstream
          git checkout main
          git merge --ff-only upstream/main || echo "Already up-to-date"
          git push origin main || echo "No changes to push"
          
      # this is global install which works for all users
      - name: Set up Node.js
        uses: actions/setup-node@v4.3.0
        with:
          node-version: '20'
      
      - name: Create user immich
        run: |
          sudo adduser --shell /bin/bash --disabled-password immich
          
      - name: Install Jellyfin ffmpeg
        run: |
          sudo apt install curl gnupg software-properties-common
          sudo add-apt-repository universe
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://repo.jellyfin.org/jellyfin_team.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/jellyfin.gpg
          export VERSION_OS="$( awk -F'=' '/^ID=/{ print $NF }' /etc/os-release )"
          export VERSION_CODENAME="$( awk -F'=' '/^VERSION_CODENAME=/{ print $NF }' /etc/os-release )"
          export DPKG_ARCHITECTURE="$( dpkg --print-architecture )"
          cat <<-EOF | sudo tee /etc/apt/sources.list.d/jellyfin.sources
          Types: deb
          URIs: https://repo.jellyfin.org/${VERSION_OS}
          Suites: ${VERSION_CODENAME}
          Components: main
          Architectures: ${DPKG_ARCHITECTURE}
          Signed-By: /etc/apt/keyrings/jellyfin.gpg
          EOF
          sudo apt update
          sudo apt install jellyfin-ffmpeg7
          sudo ln -s /usr/lib/jellyfin-ffmpeg/ffmpeg  /usr/bin/ffmpeg
          sudo ln -s /usr/lib/jellyfin-ffmpeg/ffprobe  /usr/bin/ffprobe

      - name: Install Python 3.11
        run: |
          # install Python 3.11
          # before onnxruntime-openvino is bumped, we can only use Python 3.11
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt update
          sudo apt install -y python3.11 python3.11-venv python3.11-dev
          # overwrite the default Python version
          sudo ln -sf /usr/bin/python3.11 /usr/bin/python3

      - name: Pre-build
        env:
          IMMICH_VERSION: ${{ needs.Check-immich-release.outputs.latest_release }}
        run: |
          UPLOAD_DIR=/mnt/photos/.immich
          export INSTALL_DIR=/home/immich
          echo "INSTALL_DIR=/home/immich" >> $GITHUB_ENV
          sudo mkdir -p $UPLOAD_DIR
          # create .env
          cat << EOF > ${{ github.workspace }}/.env
          REPO_TAG=$IMMICH_VERSION
          INSTALL_DIR=$INSTALL_DIR
          UPLOAD_DIR=$UPLOAD_DIR
          isCUDA=openvino
          PROXY_NPM=
          PROXY_POETRY=
          EOF
          sudo cp -r ${{ github.workspace }} /home/immich
          sudo chown -R immich:immich /home/immich/immich-in-lxc
          cd /home/immich/immich-in-lxc
          sudo ./dep-ubuntu.sh
          sudo ./pre-install.sh
          
      - name: Build immich server
        id: build
        run: |
            sudo -iu immich bash -c 'export XDG_CONFIG_HOME=$HOME/.config; export POETRY_CONFIG_DIR=$HOME/.config/pypoetry; export NVM_DIR=$HOME/.nvm; cd /home/immich/immich-in-lxc; ./install.sh'
            sudo -iu immich bash -c 'ln -sf /usr/bin/python3.11 /home/immich/app/machine-learning/venv/bin/python'
            sudo -iu immich bash -c 'ln -sf /usr/bin/python3.11 /home/immich/app/machine-learning/venv/bin/python3'
            sudo -iu immich bash -c 'ln -sf /usr/bin/python3.11 /home/immich/app/machine-learning/venv/bin/python3.11'
            echo "timestamp=$(date)" >> $GITHUB_OUTPUT
      - name: Archive app folder
        run: |
          tar -czf server.tar.gz -C $INSTALL_DIR app geodata

      - name: Upload app as artifact
        uses: actions/upload-artifact@v4
        with:
          name: immich-app-${{ needs.Check-immich-release.outputs.latest_release }}
          path: server.tar.gz

  Release-immich-build:
    needs: [Build-immich, Check-immich-release]
    if: needs.Check-immich-release.outputs.is_new_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: immich-app-${{ needs.Check-immich-release.outputs.latest_release }}
          path: app-release

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.Check-immich-release.outputs.latest_release }}
          name: immich server ${{ needs.Check-immich-release.outputs.latest_release }} with openvino for Ubuntu 24.04
          body: |
            This release contains the latest build of immich server:
            - Version: **${{ needs.Check-immich-release.outputs.latest_release }}**
            - Built on: **${{ needs.Build-immich.outputs.timestamp }}**
            - Built for: Ubuntu 24.04 LTS with openvino for ML

            **How to install**: 
            - Follow the setup steps in the README up to (but not including) `pre-install.sh`.
            - Install Python 3.11 as `onnxruntime-openvino=1.18.0` was not built for Python 3.12.
              ```shell
              add-apt-repository ppa:deadsnakes/ppa
              apt update
              # venv and header files are needed as well
              apt install python3.11 python3.11-venv python3.11-dev
              ```
            - Download `server.tar.gz` into the home folder of your LXC.
            - Remove `/home/immich/app` and `/home/immich/geodata` folders.
            - Extract the tarball using `tar -xf server.tar.gz`.
            - If necessary, manually update runtime.env or run `./post-install.sh` to install/update systemd services. Since these files generally do not change with respect to immich updates, they are not included in the tarball.
            - Restart `immich-ml` and `immich-web` services.

            **Release details**:  
            This release was created automatically by GitHub Actions. You can track the build process here: [GitHub Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
          draft: false
          prerelease: false
          artifacts: app-release/server.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
