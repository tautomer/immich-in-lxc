name: Test Isolated Build

on:
  workflow_dispatch:

jobs:
  Build-immich-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Get latest Immich release
        id: check
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/immich-app/immich/releases/latest | jq -r '.tag_name')
          echo "latest_release=$LATEST_TAG" >> $GITHUB_ENV
          echo "latest_release=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Checkout my fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pre-build Dependencies
        env:
          IMMICH_VERSION: ${{ needs.Check-immich-release.outputs.latest_release }}
          UPLOAD_DIR: ${{ vars.UPLOAD_DIR }}
        run: |
          export INSTALL_DIR=/home/immich
          echo "INSTALL_DIR=/home/immich" >> $GITHUB_ENV
          sudo mkdir -p $UPLOAD_DIR
          # create .env
          cat << EOF > ${{ github.workspace }}/.env
          REPO_TAG=$IMMICH_VERSION
          INSTALL_DIR=$INSTALL_DIR
          UPLOAD_DIR=$UPLOAD_DIR
          isCUDA=openvino
          PROXY_NPM=
          PROXY_NPM_DIST=
          PROXY_POETRY=
          EOF
          sudo cp -r ${{ github.workspace }} /home/immich
          sudo chown -R immich:immich /home/immich/immich-in-lxc
          cd /home/immich/immich-in-lxc
          head -n -2 dep-ubuntu.sh > /tmp/dep-ubuntu.sh
          sudo bash /tmp/dep-ubuntu.sh
          FUNCTIONS_TO_DISABLE=(
              "install_postgresql"
              # "build_libjxl"
              # "build_libheif"
              # "build_libraw"
              # "build_image_magick"
              "install_ffmpeg"
              "install_runtime_component"
              "add_runtime_dependency"
              "git_clone"  
          )

          INPUT_SCRIPT="pre-install.sh"
          TEMP_SCRIPT="/tmp/pre-install.sh"

          # Build the sed command dynamically
          SED_COMMAND=""
          for func_name in "${FUNCTIONS_TO_DISABLE[@]}"; do
              # This pattern matches the function name, followed by optional whitespace, and then the end of the line OR a comment.
              # It specifically avoids lines that contain "() {"
              SED_COMMAND+="-e '/^${func_name}[[:space:]]*\($\|#\)/s/^/# /' "
          done

          echo "Applying sed to comment out functions: ${FUNCTIONS_TO_DISABLE[*]}"
          eval "sed ${SED_COMMAND} ${INPUT_SCRIPT} > ${TEMP_SCRIPT}"
          sed -i "/cmake --install \./a \    DESTDIR=\/home\/runner cmake --install . --prefix=\/usr\/local" "${TEMP_SCRIPT}"
          sed -i "/make install/a \    make install DESTDIR=\/home\/runner" "${TEMP_SCRIPT}"
          sed -i "/ninja install/i\    export DESTDIR=\/home\/runner" "${TEMP_SCRIPT}"
          sed -i "/cpanminus/i \        libltdl-dev \\\\" "${TEMP_SCRIPT}"
          sed -i "/autoreconf --install/i\    sed -i '1iAC_CONFIG_AUX_DIR([.])' configure.ac" "${TEMP_SCRIPT}"
          sudo bash ${TEMP_SCRIPT}
          
      - name: Archive dependencies
        run: |
          # Use the runner's home directory (~), which is /home/runner, to tar the staged usr folder.
          tar -czf dependencies.tar.gz -C "$HOME" usr

      - name: Upload dependencies artifact
        uses: actions/upload-artifact@v4
        with:
          name: immich-dependencies
          path: dependencies.tar.gz
