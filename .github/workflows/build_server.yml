name: Build immich on new release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Immich release tag to be released'
        required: true
      deps_run_id:
        description: 'Dependency building workflow run ID'
        required: true

jobs:
  Build-immich:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout my fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download dependencies artifact
        uses: actions/download-artifact@v4
        with:
          name: dependencies
          repository: ${{ github.repository }}
          github-token: ${{ secrets.ACTIONS_PAT }}
          run-id: ${{ github.event.inputs.deps_run_id }}
          path: .

      - name: Extract compiled dependencies
        run: |
          # Extract compiled dependencies to $HOME
          # $HOME/deps/stow contains the packages grouped from GNU stow
          # $HOME/deps/json contains the version of the libraries
          # $HOME/deps/json/build-lock.json needs to be copied to the immich-in-lxc folder
          tar -xf dependencies.tar.gz -C $HOME
          cp ${HOME}/deps/json/build-lock.json ${{ github.workspace }}
          mkdir -p /opt
          mv $HOME/deps/stow /opt/stow
          rm -f dependencies.tar.gz
          sudo apt update
          sudo apt install -y stow
          cd /opt/stow
          for lib in $(ls -d */); do
            sudo stow -v $lib
          done

      - name: Create user immich
        run: |
          sudo adduser --shell /bin/bash --disabled-password immich
          
      - name: Install Jellyfin ffmpeg (mock)
        run: |
          # ./install/sh checks if ffmpeg exists, but we are only aiming to build, not run, the server, so no need to install it
          sudo touch /usr/bin/ffmpeg
          sudo chmod +x /usr/bin/ffmpeg
          sudo touch /usr/bin/ffprobe
          sudo chmod +x /usr/bin/ffprobe

      - name: Install Python 3.11
        run: |
          # install Python 3.11
          # before onnxruntime-openvino is bumped, we can only use Python 3.11
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt update
          sudo apt install -y python3.11 python3.11-venv python3.11-dev

      # this is global install which works for all users
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install build tools
        run: |
          sudo apt install -yqq build-essential
          npm install -g pnpm@10
          
      - name: Pre-build
        env:
          IMMICH_VERSION: ${{ github.event.inputs.version }}
          UPLOAD_DIR: ${{ vars.UPLOAD_DIR }}
        run: |
          export INSTALL_DIR=/home/immich
          echo "INSTALL_DIR=/home/immich" >> $GITHUB_ENV
          sudo mkdir -p $UPLOAD_DIR
          # create .env
          cat << EOF > ${{ github.workspace }}/.env
          REPO_TAG=$IMMICH_VERSION
          INSTALL_DIR=$INSTALL_DIR
          UPLOAD_DIR=$UPLOAD_DIR
          isCUDA=openvino
          PROXY_NPM=
          PROXY_NPM_DIST=
          PROXY_POETRY=
          EOF
          sudo cp -r ${{ github.workspace }} /home/immich
          sudo chown -R immich:immich /home/immich/immich-in-lxc
          cd /home/immich/immich-in-lxc
      
      - name: Build immich server
        id: build
        run: |
            # overwrite the default Python version
            sudo ln -sf /usr/bin/python3.11 /usr/bin/python3
            sudo -iu immich env "PATH=$PATH" bash -c '
              alias pnpm=/usr/local/bin/pnpm;
              export XDG_CONFIG_HOME=$HOME/.config;
              export POETRY_CONFIG_DIR=$HOME/.config/pypoetry;
              export NVM_DIR=$HOME/.nvm;
              cd /home/immich/immich-in-lxc;
              sed -i "/poetry install --no-root --extras openvino/i\ \ \ \ \ \ \ \ poetry add '\''numpy<2'\''\n\ \ \ \ \ \ \ \ poetry update --lock" install.sh;
              sed -i "s/# install_sharp_and_cli/install_sharp_and_cli_pnpm/g" install.sh;
              sed -i "s|^generate_build_lock[[:space:]]*\$|cp \$SCRIPT_DIR/build-lock.json \$INSTALL_DIR_app|" install.sh;
              ./install.sh;
              ln -sf /usr/bin/python3.11 /home/immich/app/machine-learning/venv/bin/python;
              ln -sf /usr/bin/python3.11 /home/immich/app/machine-learning/venv/bin/python3;
              ln -sf /usr/bin/python3.11 /home/immich/app/machine-learning/venv/bin/python3.11
            '
            echo "timestamp=$(date)" >> $GITHUB_OUTPUT

      - name: Archive app folder
        run: |
          tar -czf server.tar.gz -C $INSTALL_DIR app geodata

      - name: Upload app as artifact
        uses: actions/upload-artifact@v4
        with:
          name: immich-app-${{ github.event.inputs.version }}
          path: server.tar.gz